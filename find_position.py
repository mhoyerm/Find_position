import sysdef evaluate(prote, fieldSize, wanted, protName, fout):	netCharge = ''	#for each character (does not include the last fieldsize characteres)	for i in range(len(prote)-fieldSize+1):		charge = 0		#read the next fieldSize caracteres		for j in range(fieldSize):                        #compute the netCharge			if prote[i + j] == 'K' or prote[i + j] == 'R':				charge += 1			if prote[i + j] == 'E' or prote[i + j] == 'D':				charge -= 1		relative = float(i)/float(len(prote))		if charge >= wanted and wanted > 0:			fout.write("\n" + protName + ";" + str(charge) + ";" + str(i) + ";" + str(relative))		if charge <= wanted and wanted < 0:			fout.write("\n" + protName + ";" + str(charge) + ";" + str(i) + ";" + str(relative))	return#main functiondef main():	names = []	fieldSize = 30        #read the program arguments	if len(sys.argv) < 4:		print ("Use: python", sys.argv[0], "<input file name>", "<output file name>", "<charge>")		sys.exit(0)	filein = sys.argv[1] #input file name	fileout = sys.argv[2] #output file name	wanted = int(sys.argv[3]) #wanted charge        #read the file's contents	fin = open(filein, 'r')	contents = fin.read()	#open the output file	fout = open(fileout, 'w')		fout.write("Protein stretches of " + str(fieldSize))	if wanted > 0:		fout.write("\nContaining charges higher than " + str(wanted))	if wanted < 0:		fout.write("\nContaining charges lower than " + str(wanted))	fout.write("\n\nprotein;charge;absolute position;relative position")	#split the file's contents by '>'	proteins = str.split(contents, '>')[1:] #the file header is discarded	for prot in proteins:		seq = []		lista = str.split(prot, '\n') #split each protein 		names.append(lista[0]) #salve the names		#concatenate the sequences of amino acids of the protein		for temp in lista[1:]:			seq.append(temp[:])			seqfinal = ''.join(seq) 		protName = str.split(lista[0]) #take the first name		evaluate(seqfinal, fieldSize, wanted, protName[0], fout)print ('Done!')main()